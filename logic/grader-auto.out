{'fatalError': False,
 'maxTotalPoints': 1,
 'messages': [],
 'mode': 'auto',
 'parts': [{'description': 'test implementation of statement 0 for liar',
            'extraCredit': False,
            'maxPoints': 1,
            'maxSeconds': 10000,
            'messages': ["Exception thrown: <type 'exceptions.Exception'> -- Implies: wanted logic.Formula, but got susan",
                         '  File "grader.py", line 75, in <lambda>\n    def createCheck(part): return lambda : check(part)  # To create closure\n',
                         '  File "grader.py", line 46, in check\n    predForms, predQuery = predictionFunc()\n',
                         '  File "/home/cleophus/Code/school/CS221/homework8/logic/submission.py", line 168, in liar\n    formulas.append(markFn())\n',
                         '  File "/home/cleophus/Code/school/CS221/homework8/logic/submission.py", line 160, in markFn\n    return Equiv(TellTruth(mark), Implies(Not(susanFn()),susan))\n',
                         '  File "/home/cleophus/Code/school/CS221/homework8/logic/logic.py", line 110, in __init__\n    self.arg2 = self.ensureFormula(arg2)\n',
                         '  File "/home/cleophus/Code/school/CS221/homework8/logic/logic.py", line 24, in ensureFormula\n    def ensureFormula(self, arg): return self.ensureType(arg, Formula)\n',
                         '  File "/home/cleophus/Code/school/CS221/homework8/logic/logic.py", line 22, in ensureType\n    raise Exception(\'%s: wanted %s, but got %s\' % (self.__class__.__name__, wantedType, arg))\n'],
            'name': 'liar-0',
            'points': 0,
            'seconds': 0}],
 'totalPoints': 0}
